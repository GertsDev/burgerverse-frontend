---
description:
globs:
alwaysApply: true
---
# Burgerverse Frontend Project Structure & Guidelines

This document outlines the structure, technologies, and conventions used in the Burgerverse frontend application. Use this information to maintain consistency and understand the codebase.

---

## üèóÔ∏è Tech Stack

- **Framework:** ReactJS (`react`, `react-dom`)
- **Language:** TypeScript
- **State Management:** Redux Toolkit (`@reduxjs/toolkit`, `react-redux`, `redux-thunk`)
- **Routing:** React Router (`react-router-dom`)
- **UI Components:** Uses `Custom UI components and extensions are located in `src/components/ui`.
- **Styling:** CSS Modules (`*.module.css`).
    - Class names in development: `[local]__[path][name]__[hash:base64:5]`.
    - Class names in production: `[hash:base64]`.
    - Utility for conditional classes: `clsx`.
- **Build Tool:** Webpack (`webpack`, `webpack-dev-server`, `babel-loader`, `css-loader`, `ts-loader`)
- **Testing:**
    - Unit/Integration: Jest (`jest`, `ts-jest`, `@testing-library/react`)
    - E2E: Cypress (`cypress`)
- **Linting/Formatting:** ESLint (`eslint`), Prettier (`prettier`)
- **Storybook:** For component development and documentation (`@storybook/react`)

---

## üìÅ Directory Structure (`src/`)

- **`components/`**: Contains reusable React components.
    - **`app/`**: Core application layout components (e.g., `App`, `AppHeader`).
    - **`ui/`**: Generic UI elements (buttons, inputs, modals, etc.) possibly extending or supplementing the main UI library.
    - **Feature-specific folders** (e.g., `burger-constructor/`, `burger-ingredients/`, `feed-info/`, `order-info/`): Components related to specific application features.
- **`hooks/`**: Custom React hooks for reusable logic (e.g., fetching data, managing local state).
- **`images/`**: Static image assets.
- **`pages/`**: Top-level components representing application pages/routes (e.g., `LoginPage`, `ConstructorPage`, `FeedPage`).
- **`services/`**: Redux Toolkit related files.
    - **`slices/`**: Redux state slices, defining reducers and actions for different state domains (e.g., `userSlice`, `ingredientsSlice`, `orderSlice`).
    - **`selectors/`**: Functions to select specific pieces of state from the Redux store (memoized for performance).
    - **`store.ts`**: Redux store configuration.
- **`stories/`**: Storybook stories for components.
- **`utils/`**: Utility functions and modules.
    - **`api/`**: Functions for interacting with the backend API (fetching data, authentication). Likely uses `fetch` or a wrapper.
    - **`cookie.ts`**: Utilities for handling browser cookies (e.g., for auth tokens).
    - **`types.ts`**: Shared TypeScript type definitions used across the application.
- **`index.tsx`**: Application entry point, initializes React DOM and Redux store.
- **`index.css`**: Global CSS styles.

---

## üîë Authentication Flow (Frontend Perspective)

- Uses `accessToken` (short-lived, stored likely in cookies managed by `@utils-cookie` or directly via API responses) for authenticated API requests (`Authorization: Bearer <token>`).
- Uses `refreshToken` (long-lived, stored in `localStorage`) to request a new `accessToken` when it expires (via `/auth/token` endpoint).
- Authentication state (user data, logged-in status) is managed in a Redux slice (likely `userSlice` in `@slices/`).
- API calls related to auth are likely in `@api/auth-api.ts` or similar.
- Protected routes are handled using a component like `ProtectedRoute` which checks the auth state.

---

## ‚öôÔ∏è Path Aliases (`tsconfig.json`)

Use these aliases for cleaner imports:

- `@api/*`: `src/utils/api/*`
- `@components/*`: `src/components/*`
- `@components`: `src/components/index.ts`
- `@ui/*`: `src/components/ui/*`
- `@ui`: `src/components/ui/index.ts`
- `@pages/*`: `src/pages/*`
- `@pages`: `src/pages/index.ts`
- `@images/*`: `src/images/*`
- `@ui-pages/*`: `src/components/ui/pages/*` (Note: Structure suggests UI components specific to pages)
- `@ui-pages`: `src/components/ui/pages/index.ts`
- `@slices/*`: `src/services/slices/*`
- `@selectors/*`: `src/services/selectors/*`
- `@utils-types`: `src/utils/types.ts`
- `@utils-cookie`: `src/utils/cookie.ts`
- `@redux-store`: `src/services/store.ts`
- `@hooks/*`: `src/hooks/*`

---

## ‚ú® Coding Conventions & Best Practices

- **Follow custom instructions:** Adhere to the user's provided guidelines regarding early returns, naming conventions (`handleEvent`), accessibility (`tabindex`, `aria-label`), `const` functions with types.
- **TypeScript:** Use strong typing wherever possible. Define interfaces/types in `@utils-types` for shared structures or locally within components/slices for specific needs.
- **Redux Toolkit:** Follow RTK patterns for creating slices, dispatching actions (especially async thunks for API calls), and selecting state.
- **Components:** Keep components focused and reusable. Use feature folders (`src/components/burger-constructor/`) for better organization. Separate presentational (`ui/`) from container/feature components.
- **Error Handling:** Implement proper error handling for API calls (e.g., showing user feedback, logging errors).
- **Accessibility (a11y):** Ensure components are accessible (semantic HTML, ARIA attributes, keyboard navigation). Use `eslint-plugin-jsx-a11y`.
- **Testing:** Write tests for components (Jest/RTL) and critical user flows (Cypress).

---

**This document helps maintain consistency and provides context for developing the Burgerverse frontend.**
